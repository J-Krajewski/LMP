// __multiversion__
// This shader is from the Gameface library modified to work in the
// Bedrock engine and heavily depends on Gameface's functionality, why
// some numbers and values seem arbitrary or "magic".

#include "fragmentVersionSimple.h"

#include "uniformUIStandardPrimitiveAdditionalPixelConstants.h"

varying vec4 ColorOut;
varying vec4 AdditionalOut;
// We need this here even if we do not use it as some drivers require
// the verying variables to match between the vertex and fragment shaders.
varying vec3 ScreenNormalPosition;

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;

float GetLuminance(vec3 color) {
	return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
}

void main() {
	vec2 uvPoint = AdditionalOut.xy;
	if ((PRIM_PROPS_1.z != (-1.0)) || (PRIM_PROPS_1.w != (-1.0)))
	{
		uvPoint.x = clamp(AdditionalOut.x, PRIM_PROPS_1.x, PRIM_PROPS_1.x + PRIM_PROPS_1.z);
		uvPoint.y = clamp(AdditionalOut.y, 1.0 - (PRIM_PROPS_1.y + PRIM_PROPS_1.w), 1.0 - PRIM_PROPS_1.y);
	}

	vec4 outColor = texture2D(TEXTURE_0, uvPoint);
	outColor.a = mix(1.0 - outColor.a, outColor.a, ColorOut.r);
	outColor.a = mix(GetLuminance(outColor.rgb), outColor.a, ColorOut.b);
	float alpha = ColorOut.w * clamp(AdditionalOut.z, 0.0, 1.0);
	gl_FragColor = outColor * alpha;
}
