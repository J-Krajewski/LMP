// __multiversion__
// This shader is from the Gameface library modified to work in the
// Bedrock engine and heavily depends on Gameface's functionality, why
// some numbers and values seem arbitrary or "magic".

#include "fragmentVersionSimple.h"
#include "uniformMacro.h"

varying vec4 ColorOut;
varying vec4 AdditionalOut;
// We need this here even if we do not use it as some drivers require
// the verying variables to match between the vertex and fragment shaders.
varying vec3 ScreenNormalPosition;

LAYOUT_BINDING(1) uniform sampler2D TEXTURE_1;

float GetLuminance(vec3 color) {
	return 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
}

void main() {
	vec2 uvPos = vec2(AdditionalOut.x, AdditionalOut.y);
#if defined(NO_TEXTURE_SIZE)
	// Fallback rendering for raster fonts, still looks decent
	float dfValue = texture2D(TEXTURE_1, uvPos).r;
#else
	// Enhanced rendering for raster fonts, looks perfectly crisp
	// even when Gameface assigns bilinear samplers
	vec2 texSize = vec2(textureSize(TEXTURE_1, 0));
	ivec2 texCoords = ivec2(uvPos.x * texSize.x, uvPos.y * texSize.y);
	float dfValue = texelFetch(TEXTURE_1, texCoords, 0).r;
#endif
	float lum = 1.45 - GetLuminance(ColorOut.xyz);
	gl_FragColor = ColorOut * pow(abs(dfValue), lum);
}
